import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

class Question {
    private String questionText;
    private ArrayList<String> options;
    private int correctOption;

    public Question(String questionText, ArrayList<String> options, int correctOption) {
        this.questionText = questionText;
        this.options = options;
        this.correctOption = correctOption;
    }

    public String getQuestionText() {
        return questionText;
    }

    public ArrayList<String> getOptions() {
        return options;
    }

    public boolean isCorrect(int userAnswer) {
        return userAnswer == correctOption;
    }
}

class QuizApplication extends Frame implements ActionListener {
    private ArrayList<Question> questions = new ArrayList<>();
    private int currentQuestionIndex = 0;
    private int score = 0;

    private Label questionLabel;
    private CheckboxGroup optionsGroup;
    private Checkbox[] optionsCheckboxes;
    private Button nextButton;

    public QuizApplication() {
        // Setup Frame
        setTitle("Quiz Application");
        setSize(600, 400);
        setLayout(new GridLayout(6, 1));
        setLocationRelativeTo(null);

        // Initialize Components
        questionLabel = new Label("");
        optionsGroup = new CheckboxGroup();
        optionsCheckboxes = new Checkbox[4];
        for (int i = 0; i < optionsCheckboxes.length; i++) {
            optionsCheckboxes[i] = new Checkbox("", optionsGroup, false);
            add(optionsCheckboxes[i]);
        }

        nextButton = new Button("Next");
        nextButton.addActionListener(this);

        add(questionLabel);
        add(nextButton);

        loadDefaultGKQuestions();
        displayQuestion();

        // Window close handler
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }

    private void loadDefaultGKQuestions() {
        ArrayList<String> options1 = new ArrayList<>();
        options1.add("Delhi");
        options1.add("Mumbai");
        options1.add("Kolkata");
        options1.add("Chennai");
        questions.add(new Question("What is the capital of India?", options1, 1));

        ArrayList<String> options2 = new ArrayList<>();
        options2.add("Mars");
        options2.add("Venus");
        options2.add("Jupiter");
        options2.add("Earth");
        questions.add(new Question("Which planet is known as the 'Red Planet'?", options2, 1));

        ArrayList<String> options3 = new ArrayList<>();
        options3.add("Africa");
        options3.add("Asia");
        options3.add("Australia");
        options3.add("Europe");
        questions.add(new Question("Which is the largest continent?", options3, 2));

        ArrayList<String> options4 = new ArrayList<>();
        options4.add("Nile");
        options4.add("Amazon");
        options4.add("Ganga");
        options4.add("Mississippi");
        questions.add(new Question("What is the longest river in the world?", options4, 1));
    }

    private void displayQuestion() {
        if (currentQuestionIndex < questions.size()) {
            Question currentQuestion = questions.get(currentQuestionIndex);
            questionLabel.setText(currentQuestion.getQuestionText());

            ArrayList<String> options = currentQuestion.getOptions();
            for (int i = 0; i < optionsCheckboxes.length; i++) {
                if (i < options.size()) {
                    optionsCheckboxes[i].setLabel(options.get(i));
                    optionsCheckboxes[i].setVisible(true);
                } else {
                    optionsCheckboxes[i].setVisible(false);
                }
            }
        } else {
            showResults();
        }
    }

    private void showResults() {
        removeAll();
        setLayout(new GridLayout(2, 1));

        Label resultLabel = new Label("Quiz Over! Your score: " + score + "/" + questions.size(), Label.CENTER);
        add(resultLabel);

        Button exitButton = new Button("Exit");
        exitButton.addActionListener(e -> dispose());
        add(exitButton);

        validate();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (currentQuestionIndex < questions.size()) {
            Question currentQuestion = questions.get(currentQuestionIndex);

            // Check selected option
            int selectedOption = -1;
            for (int i = 0; i < optionsCheckboxes.length; i++) {
                if (optionsCheckboxes[i].getState()) {
                    selectedOption = i + 1;
                    break;
                }
            }

            if (selectedOption == -1) {
                // No option selected
                new Dialog(this, "Warning", true) {{
                    add(new Label("Please select an option.", Label.CENTER));
                    setSize(300, 150);
                    addWindowListener(new WindowAdapter() {
                        public void windowClosing(WindowEvent e) {
                            dispose();
                        }
                    });
                    setVisible(true);
                }};
                return;
            }

            if (currentQuestion.isCorrect(selectedOption)) {
                score++;
            }

            currentQuestionIndex++;
            displayQuestion();
        }
    }

    public static void main(String[] args) {
        new QuizApplication();
    }
}
